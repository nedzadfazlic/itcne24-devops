name: Flask App CI/CD & IaC

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  # ---------------------------------
  # PHASE 1: CODE QUALITY (SonarQube)
  # ---------------------------------
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for deep SonarQube analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt # Include sonar-scanner dependency here if needed

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          # Assuming your flask app code is in the root
          args: >
            -Dsonar.projectKey=my-flask-app
            -Dsonar.sources=.
            -Dsonar.python.version=3

  # ---------------------------------
  # PHASE 2: INFRASTRUCTURE (Terraform)
  # ---------------------------------
  terraform:
    name: Provision & Deploy
    runs-on: ubuntu-latest
    needs: sonarqube # Only run if code quality checks pass
    environment: production # Use a GitHub Environment for protection

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # (A) Configure AWS Credentials (Use OIDC for role assumption)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::YOUR_ACCOUNT_ID:role/GitHubActionsTerraformRole # Replace
          aws-region: us-east-1 # Replace

      # (B) Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # (C) Terraform Init (uses local backend)
      - name: Terraform Init
        id: init
        run: terraform init

      # (D) Terraform Plan (on PR or first run)
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' || steps.init.outputs.backend_type == 'local' # Simple logic for first run
        run: terraform plan -no-color -out=tfplan

      # (E) Terraform Apply (only on push to main)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        
      # (F) Commit .tfstate file back to repo (DANGER - ONLY FOR LOCAL BACKEND)
      - name: Commit Terraform State (DANGER!)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "CI/CD: Update local terraform.tfstate"
          file_pattern: 'terraform.tfstate'

